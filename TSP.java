import java.util.*;

public class TSP {

	private int[][] tsp; 


	TSP(int[][] inputIn)
	{
		tsp = inputIn;
	}

	
	public void hillClimb(int[][] initialIn)
	{
		int[][] solution = initialIn;
		int solutionTotal = totalCost(initialIn);
		int[][] neighbour;
		int neighbourTotal;
		System.out.println("Initial solution: " + Arrays.deepToString(solution));
		System.out.println("Initial total: " + solutionTotal);
		int i = 25;
		while (i != 0)
		{
			neighbour = Arrays.stream(solution).map(int[]::clone).toArray(int[][]::new);
			int swap1 = randomCity();
			int swap2 = swap1 + 1;
			int x = neighbour[swap1][0];
			neighbour[swap1][0] = neighbour[swap2][0];
			neighbour[swap2][0] = x;
			neighbour[swap1 -1][1] = tsp[neighbour[swap1 -1][0]][neighbour[swap1][0]];
			neighbour[swap2][1] = tsp[neighbour[swap2][0]][neighbour[swap2 +1][0]];
			neighbourTotal = totalCost(neighbour);
			
			if (solutionTotal > neighbourTotal)
			{
				System.out.println("Cheaper neighbour total: " + neighbourTotal);
				solution = Arrays.stream(neighbour).map(int[]::clone).toArray(int[][]::new);
				solutionTotal = neighbourTotal;
				i = 26;
			}			
			i--;
		}
		System.out.println("Cheapest route (no improvement after 25 iteration): " + Arrays.deepToString(solution));
		System.out.println("Cost: " + solutionTotal);
	}
	
	public int totalCost(int[][] a)
	{
		int total = 0;
		for (int i = 0; i < a.length; i++)
		{
			total += a[i][1];
		}
		return total;
	}
	
	public int[][] greedyInitial()
	{
		int[][] greedy = new int[tsp.length][2];    //1d for order, 2d for cost to next city
		boolean[] explored = new boolean[tsp.length];
		int k = 0;
		int j = 0;
		int smallest = 99; 
		
		for (int s = 0; s < greedy.length; s++)
		{
			smallest = 99;
			for (int i = 0; i < tsp.length; i++)
			{ 
				if ((tsp[k][i] < smallest) && !(explored[i]) && (k != i))
				{
					smallest = tsp[k][i];
					j = i;
				}
			}
			greedy[s][0] = k;
			greedy[s][1] = smallest;
			explored[k] = true;
			k = j;
		}
		greedy[greedy.length -1][1] = tsp[greedy[greedy.length -1][0]][0];    //assign final cost back to start
		return greedy;
	}
	
	public int[][] randomInitial()
	{
		int[][] random = new int[tsp.length][2];    //1d for order, 2d for cost to next city
		int k = 0;
		ArrayList<Integer> a = new ArrayList<>(tsp.length - 1);
		for (int i = 1; i < tsp.length; i++)
		{                 
		    a.add(i);
		}
		Collections.shuffle(a);
		int[] b = a.stream().mapToInt(Integer::intValue).toArray();
		for (int s = 0; s < random.length; s++)
		{
			random[s][0] = k;
			if (s != random.length -1)
			{
				k = b[s];
			}
			random[s][1] = tsp[random[s][0]][k];
		}
		random[random.length -1][1] = tsp[random[random.length -1][0]][0];    //assign final cost back to start
		return random;
		
	}
	
	public int randomCity()
	{
		int random;
		return random = (int) (Math.random()*(tsp.length-4)+1);    //range excludes start node and three back from the end to avoid swapping the last node connecting back to start
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] input = 
			{{0,7,4,2,5,5,2,6,3,4,6,3,3,7,3,9,10,8,4,6,2,10,9,9,3,6,1,5,4,2,2,5,1,6,5,7,7,7,1,1,4,6,7,5,9,8,10,6,4,2},
			{7,0,7,8,5,1,3,2,3,5,6,5,9,6,10,7,10,3,7,3,7,7,1,3,3,7,9,4,8,7,1,7,4,10,1,5,5,5,8,4,8,5,1,2,8,5,2,4,7,2},
			{4,7,0,8,3,10,3,8,2,3,1,6,7,6,5,7,7,7,7,10,3,8,3,2,7,5,5,7,8,4,7,5,9,9,3,7,6,6,9,3,4,2,10,7,5,7,6,7,6,8},
			{2,8,8,0,6,10,3,2,2,1,5,5,4,8,7,8,10,10,2,2,7,1,6,6,9,5,4,7,8,6,4,2,6,3,1,8,3,5,7,4,8,4,7,8,5,1,4,5,3,2},
			{5,5,3,6,0,9,5,9,4,8,4,9,8,4,3,8,10,4,7,5,9,8,2,9,10,6,9,6,2,2,5,8,9,8,4,6,1,2,2,7,5,2,5,2,1,9,6,10,7,6},
			{5,1,10,10,9,0,9,9,10,1,9,7,10,6,5,9,3,5,10,6,9,8,6,3,7,1,7,7,8,9,10,8,6,10,6,1,2,9,5,9,3,6,7,1,7,4,1,5,2,2},
			{2,3,3,3,5,9,0,3,2,2,1,7,3,6,7,5,6,5,2,5,9,9,3,3,6,7,5,3,10,1,2,2,2,7,6,1,10,8,8,1,9,10,10,9,8,6,2,4,2,1},
			{6,2,8,2,9,9,3,0,10,4,3,4,5,7,1,9,6,9,4,5,1,2,7,4,9,2,10,6,8,10,3,5,5,8,9,2,2,4,1,6,4,2,3,10,7,5,10,2,8,8},
			{3,3,2,2,4,10,2,10,0,6,2,6,3,2,3,9,1,3,1,5,1,9,2,1,4,5,2,10,4,3,1,3,1,6,8,7,1,1,8,10,6,2,9,4,3,8,1,1,7,7},
			{4,5,3,1,8,1,2,4,6,0,6,8,8,8,3,7,6,4,1,8,4,7,8,2,2,6,5,9,8,8,1,1,1,8,10,7,2,8,2,2,7,4,7,8,6,8,3,8,10,9},
			{6,6,1,5,4,9,1,3,2,6,0,1,4,4,7,6,8,4,3,1,8,3,4,6,3,7,5,2,8,2,3,3,6,1,5,2,2,8,3,7,10,5,7,8,5,7,2,10,2,3},
			{3,5,6,5,9,7,7,4,6,8,1,0,8,5,8,4,3,1,7,5,5,7,1,4,8,7,2,2,1,1,5,7,8,6,2,7,2,2,1,2,2,2,4,4,3,3,9,8,6,2},
			{3,9,7,4,8,10,3,5,3,8,4,8,0,3,1,10,8,6,4,2,7,10,2,3,4,1,7,5,10,5,7,2,4,2,8,9,4,7,3,6,9,6,4,3,5,5,4,6,8,5},
			{7,6,6,8,4,6,6,7,2,8,4,5,3,0,5,2,1,3,4,7,10,10,5,3,8,8,8,8,2,7,5,3,1,9,2,2,7,9,6,8,2,10,6,7,1,9,8,2,6,4},
			{3,10,5,7,3,5,7,1,3,3,7,8,1,5,0,6,4,5,2,3,1,10,7,10,2,10,8,6,5,3,8,3,1,8,7,8,7,5,4,9,4,9,8,9,6,7,10,5,1,9},
			{9,7,7,8,8,9,5,9,9,7,6,4,10,2,6,0,7,4,10,3,7,7,4,2,1,5,2,8,4,9,8,6,2,10,3,10,3,4,1,7,2,1,8,4,7,4,7,1,10,9},
			{10,10,7,10,10,3,6,6,1,6,8,3,8,1,4,7,0,8,9,4,7,6,6,3,3,5,3,9,10,1,6,1,9,10,1,10,1,7,8,6,9,9,7,2,3,2,1,2,7,10},
			{8,3,7,10,4,5,5,9,3,4,4,1,6,3,5,4,8,0,4,5,10,10,7,10,8,4,7,3,3,7,6,5,7,8,6,6,6,6,1,8,10,4,10,4,9,5,5,3,2,4},
			{4,7,7,2,7,10,2,4,1,1,3,7,4,4,2,10,9,4,0,8,8,7,1,9,10,8,1,4,8,8,3,3,7,5,7,3,2,9,8,10,2,2,1,5,2,9,1,1,6,8},
			{6,3,10,2,5,6,5,5,5,8,1,5,2,7,3,3,4,5,8,0,4,2,4,3,6,10,7,2,4,1,6,5,10,9,5,9,2,4,10,10,8,7,4,10,2,8,7,9,4,8},
			{2,7,3,7,9,9,9,1,1,4,8,5,7,10,1,7,7,10,8,4,0,9,4,6,10,6,4,7,4,8,5,5,7,10,4,9,8,10,1,4,7,3,3,8,7,6,7,1,4,5},
			{10,7,8,1,8,8,9,2,9,7,3,7,10,10,10,7,6,10,7,2,9,0,3,8,9,3,8,2,9,2,6,4,9,6,5,9,4,5,10,1,10,2,7,6,7,4,7,9,1,1},
			{9,1,3,6,2,6,3,7,2,8,4,1,2,5,7,4,6,7,1,4,4,3,0,10,7,3,5,2,3,3,4,2,4,2,9,1,10,4,1,4,8,8,6,7,9,1,4,1,2,8},
			{9,3,2,6,9,3,3,4,1,2,6,4,3,3,10,2,3,10,9,3,6,8,10,0,8,9,6,1,10,9,3,6,10,8,9,5,5,6,3,8,6,7,4,2,5,4,8,8,7,2},
			{3,3,7,9,10,7,6,9,4,2,3,8,4,8,2,1,3,8,10,6,10,9,7,8,0,1,6,4,10,10,3,9,9,6,9,10,6,8,6,1,5,7,6,4,10,9,9,4,6,9},
			{6,7,5,5,6,1,7,2,5,6,7,7,1,8,10,5,5,4,8,10,6,3,3,9,1,0,10,7,3,7,1,5,7,10,9,5,8,5,10,10,9,4,5,3,8,9,10,6,6,2},
			{1,9,5,4,9,7,5,10,2,5,5,2,7,8,8,2,3,7,1,7,4,8,5,6,6,10,0,9,5,3,9,8,9,3,7,7,2,5,3,8,3,9,9,4,5,7,9,7,6,4},
			{5,4,7,7,6,7,3,6,10,9,2,2,5,8,6,8,9,3,4,2,7,2,2,1,4,7,9,0,5,8,9,8,1,7,5,5,2,9,4,3,4,4,6,6,4,4,6,7,10,8},
			{4,8,8,8,2,8,10,8,4,8,8,1,10,2,5,4,10,3,8,4,4,9,3,10,10,3,5,5,0,5,9,2,1,1,2,4,4,1,6,1,2,7,9,10,6,10,6,6,4,5},
			{2,7,4,6,2,9,1,10,3,8,2,1,5,7,3,9,1,7,8,1,8,2,3,9,10,7,3,8,5,0,5,1,9,1,5,9,4,7,9,9,10,2,3,9,6,6,7,9,6,3},
			{2,1,7,4,5,10,2,3,1,1,3,5,7,5,8,8,6,6,3,6,5,6,4,3,3,1,9,9,9,5,0,5,5,10,7,7,8,4,6,6,2,6,7,5,9,8,4,5,4,8},
			{5,7,5,2,8,8,2,5,3,1,3,7,2,3,3,6,1,5,3,5,5,4,2,6,9,5,8,8,2,1,5,0,8,5,7,10,8,8,2,4,6,5,1,3,9,1,9,1,7,6},
			{1,4,9,6,9,6,2,5,1,1,6,8,4,1,1,2,9,7,7,10,7,9,4,10,9,7,9,1,1,9,5,8,0,3,6,2,7,6,1,1,2,1,5,9,7,6,9,1,10,2},
			{6,10,9,3,8,10,7,8,6,8,1,6,2,9,8,10,10,8,5,9,10,6,2,8,6,10,3,7,1,1,10,5,3,0,6,2,6,1,8,9,10,10,6,3,2,6,6,8,1,7},
			{5,1,3,1,4,6,6,9,8,10,5,2,8,2,7,3,1,6,7,5,4,5,9,9,9,9,7,5,2,5,7,7,6,6,0,6,2,10,6,5,10,7,5,9,6,6,7,4,3,6},
			{7,5,7,8,6,1,1,2,7,7,2,7,9,2,8,10,10,6,3,9,9,9,1,5,10,5,7,5,4,9,7,10,2,2,6,0,9,5,2,5,4,5,9,5,4,4,2,3,1,5},
			{7,5,6,3,1,2,10,2,1,2,2,2,4,7,7,3,1,6,2,2,8,4,10,5,6,8,2,2,4,4,8,8,7,6,2,9,0,3,3,5,2,5,8,3,8,1,4,1,3,1},
			{7,5,6,5,2,9,8,4,1,8,8,2,7,9,5,4,7,6,9,4,10,5,4,6,8,5,5,9,1,7,4,8,6,1,10,5,3,0,2,2,3,2,2,6,10,10,3,5,4,6},
			{1,8,9,7,2,5,8,1,8,2,3,1,3,6,4,1,8,1,8,10,1,10,1,3,6,10,3,4,6,9,6,2,1,8,6,2,3,2,0,3,1,5,2,1,10,5,10,8,1,7},
			{1,4,3,4,7,9,1,6,10,2,7,2,6,8,9,7,6,8,10,10,4,1,4,8,1,10,8,3,1,9,6,4,1,9,5,5,5,2,3,0,8,7,6,3,8,3,4,9,9,5},
			{4,8,4,8,5,3,9,4,6,7,10,2,9,2,4,2,9,10,2,8,7,10,8,6,5,9,3,4,2,10,2,6,2,10,10,4,2,3,1,8,0,4,7,10,10,6,4,9,5,10},
			{6,5,2,4,2,6,10,2,2,4,5,2,6,10,9,1,9,4,2,7,3,2,8,7,7,4,9,4,7,2,6,5,1,10,7,5,5,2,5,7,4,0,1,6,8,2,4,2,4,5},
			{7,1,10,7,5,7,10,3,9,7,7,4,4,6,8,8,7,10,1,4,3,7,6,4,6,5,9,6,9,3,7,1,5,6,5,9,8,2,2,6,7,1,0,6,1,6,3,3,3,2},
			{5,2,7,8,2,1,9,10,4,8,8,4,3,7,9,4,2,4,5,10,8,6,7,2,4,3,4,6,10,9,5,3,9,3,9,5,3,6,1,3,10,6,6,0,10,10,9,8,2,4},
			{9,8,5,5,1,7,8,7,3,6,5,3,5,1,6,7,3,9,2,2,7,7,9,5,10,8,5,4,6,6,9,9,7,2,6,4,8,10,10,8,10,8,1,10,0,2,1,4,7,7},
			{8,5,7,1,9,4,6,5,8,8,7,3,5,9,7,4,2,5,9,8,6,4,1,4,9,9,7,4,10,6,8,1,6,6,6,4,1,10,5,3,6,2,6,10,2,0,6,5,3,6},
			{10,2,6,4,6,1,2,10,1,3,2,9,4,8,10,7,1,5,1,7,7,7,4,8,9,10,9,6,6,7,4,9,9,6,7,2,4,3,10,4,4,4,3,9,1,6,0,8,8,6},
			{6,4,7,5,10,5,4,2,1,8,10,8,6,2,5,1,2,3,1,9,1,9,1,8,4,6,7,7,6,9,5,1,1,8,4,3,1,5,8,9,9,2,3,8,4,5,8,0,8,7},
			{4,7,6,3,7,2,2,8,7,10,2,6,8,6,1,10,7,2,6,4,4,1,2,7,6,6,6,10,4,6,4,7,10,1,3,1,3,4,1,9,5,4,3,2,7,3,8,8,0,2},
			{2,2,8,2,6,2,1,8,7,9,3,2,5,4,9,9,10,4,8,8,5,1,8,2,9,2,4,8,5,3,8,6,2,7,6,5,1,6,7,5,10,5,2,4,7,6,6,7,2,0}};
		
		TSP t = new TSP(input);
		//int[][] a = t.greedyInitial();
		int[][] b = t.randomInitial();
		t.hillClimb(b);

	}

}
